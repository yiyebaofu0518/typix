/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as ChatIndexImport } from './routes/chat/index'
import { Route as SettingsCommonImport } from './routes/settings/common'
import { Route as SettingsProviderRouteImport } from './routes/settings/provider/route'
import { Route as SettingsProviderIndexImport } from './routes/settings/provider/index'
import { Route as SettingsProviderProviderIdImport } from './routes/settings/provider/$providerId'

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const ChatIndexRoute = ChatIndexImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsCommonRoute = SettingsCommonImport.update({
  id: '/common',
  path: '/common',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsProviderRouteRoute = SettingsProviderRouteImport.update({
  id: '/provider',
  path: '/provider',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsProviderIndexRoute = SettingsProviderIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsProviderRouteRoute,
} as any)

const SettingsProviderProviderIdRoute = SettingsProviderProviderIdImport.update(
  {
    id: '/$providerId',
    path: '/$providerId',
    getParentRoute: () => SettingsProviderRouteRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/settings/provider': {
      id: '/settings/provider'
      path: '/provider'
      fullPath: '/settings/provider'
      preLoaderRoute: typeof SettingsProviderRouteImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/common': {
      id: '/settings/common'
      path: '/common'
      fullPath: '/settings/common'
      preLoaderRoute: typeof SettingsCommonImport
      parentRoute: typeof SettingsRouteImport
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/provider/$providerId': {
      id: '/settings/provider/$providerId'
      path: '/$providerId'
      fullPath: '/settings/provider/$providerId'
      preLoaderRoute: typeof SettingsProviderProviderIdImport
      parentRoute: typeof SettingsProviderRouteImport
    }
    '/settings/provider/': {
      id: '/settings/provider/'
      path: '/'
      fullPath: '/settings/provider/'
      preLoaderRoute: typeof SettingsProviderIndexImport
      parentRoute: typeof SettingsProviderRouteImport
    }
  }
}

// Create and export the route tree

interface SettingsProviderRouteRouteChildren {
  SettingsProviderProviderIdRoute: typeof SettingsProviderProviderIdRoute
  SettingsProviderIndexRoute: typeof SettingsProviderIndexRoute
}

const SettingsProviderRouteRouteChildren: SettingsProviderRouteRouteChildren = {
  SettingsProviderProviderIdRoute: SettingsProviderProviderIdRoute,
  SettingsProviderIndexRoute: SettingsProviderIndexRoute,
}

const SettingsProviderRouteRouteWithChildren =
  SettingsProviderRouteRoute._addFileChildren(
    SettingsProviderRouteRouteChildren,
  )

interface SettingsRouteRouteChildren {
  SettingsProviderRouteRoute: typeof SettingsProviderRouteRouteWithChildren
  SettingsCommonRoute: typeof SettingsCommonRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsProviderRouteRoute: SettingsProviderRouteRouteWithChildren,
  SettingsCommonRoute: SettingsCommonRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/settings/provider': typeof SettingsProviderRouteRouteWithChildren
  '/settings/common': typeof SettingsCommonRoute
  '/chat': typeof ChatIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/settings/provider/$providerId': typeof SettingsProviderProviderIdRoute
  '/settings/provider/': typeof SettingsProviderIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings/common': typeof SettingsCommonRoute
  '/chat': typeof ChatIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/settings/provider/$providerId': typeof SettingsProviderProviderIdRoute
  '/settings/provider': typeof SettingsProviderIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/settings/provider': typeof SettingsProviderRouteRouteWithChildren
  '/settings/common': typeof SettingsCommonRoute
  '/chat/': typeof ChatIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/settings/provider/$providerId': typeof SettingsProviderProviderIdRoute
  '/settings/provider/': typeof SettingsProviderIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/settings/provider'
    | '/settings/common'
    | '/chat'
    | '/settings/'
    | '/settings/provider/$providerId'
    | '/settings/provider/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings/common'
    | '/chat'
    | '/settings'
    | '/settings/provider/$providerId'
    | '/settings/provider'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/settings/provider'
    | '/settings/common'
    | '/chat/'
    | '/settings/'
    | '/settings/provider/$providerId'
    | '/settings/provider/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
  ChatIndexRoute: typeof ChatIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  ChatIndexRoute: ChatIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/chat/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings/route.tsx",
      "children": [
        "/settings/provider",
        "/settings/common",
        "/settings/"
      ]
    },
    "/settings/provider": {
      "filePath": "settings/provider/route.tsx",
      "parent": "/settings",
      "children": [
        "/settings/provider/$providerId",
        "/settings/provider/"
      ]
    },
    "/settings/common": {
      "filePath": "settings/common.tsx",
      "parent": "/settings"
    },
    "/chat/": {
      "filePath": "chat/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx",
      "parent": "/settings"
    },
    "/settings/provider/$providerId": {
      "filePath": "settings/provider/$providerId.tsx",
      "parent": "/settings/provider"
    },
    "/settings/provider/": {
      "filePath": "settings/provider/index.tsx",
      "parent": "/settings/provider"
    }
  }
}
ROUTE_MANIFEST_END */
